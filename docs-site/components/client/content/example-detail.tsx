"use client"

import * as React from "react"
import { ExampleDetailProps } from "@/types/example"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CodeViewer } from "@/components/client/widgets/code-viewer"
import { cn } from "@/lib/utils"
import { 
  ArrowLeft, 
  Copy, 
  Check, 
  ExternalLink,
  Code2,
  Sparkles,
  ArrowRight,
  Tag
} from "lucide-react"

/**
 * Displays detailed view of an example with code, iterations, and metadata
 */
export function ExampleDetail({ example, onClose }: ExampleDetailProps) {
  const [copiedStates, setCopiedStates] = React.useState<Record<string, boolean>>({})

  const categoryColors: Record<string, string> = {
    forms: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
    dashboards: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
    landing: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
    "data-viz": "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
    "ui-components": "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200",
  }

  const handleCopy = async (code: string, id: string) => {
    try {
      await navigator.clipboard.writeText(code)
      setCopiedStates(prev => ({ ...prev, [id]: true }))
      setTimeout(() => {
        setCopiedStates(prev => ({ ...prev, [id]: false }))
      }, 2000)
    } catch (err) {
      console.error('Failed to copy code:', err)
    }
  }

  const handleBack = () => {
    if (onClose) {
      onClose()
    }
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <div className="sticky top-0 z-10 bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <Button
              variant="ghost"
              onClick={handleBack}
              className="flex items-center gap-2"
            >
              <ArrowLeft className="h-4 w-4" />
              Back to Examples
            </Button>
            
            {example.chatId && (
              <Button
                variant="outline"
                asChild
                className="flex items-center gap-2"
              >
                <a
                  href={`https://v0.dev/chat/${example.chatId}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View on v0.dev
                  <ExternalLink className="h-4 w-4" />
                </a>
              </Button>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Title Section */}
        <div className="mb-8">
          <div className="flex items-start justify-between gap-4 mb-4">
            <h1 className="text-3xl sm:text-4xl font-bold text-gray-900">
              {example.title}
            </h1>
            <span
              className={cn(
                "px-3 py-1 text-sm font-medium rounded-full whitespace-nowrap",
                categoryColors[example.category] || "bg-gray-100 text-gray-800"
              )}
            >
              {example.category}
            </span>
          </div>
          
          <p className="text-lg text-gray-600 mb-4">{example.description}</p>
          
          {example.tags && example.tags.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {example.tags.map(tag => (
                <span
                  key={tag}
                  className="inline-flex items-center gap-1 px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                >
                  <Tag className="h-3 w-3" />
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>

        {/* Initial Prompt */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-purple-600" />
              Initial Prompt
            </CardTitle>
            <CardDescription>
              The prompt used to generate this component with v0
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="rounded-lg bg-muted p-4">
              <p className="text-foreground whitespace-pre-wrap">{example.prompt}</p>
            </div>
          </CardContent>
        </Card>

        {/* Generated Code */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Code2 className="h-5 w-5 text-blue-600" />
              Generated Code
            </CardTitle>
            <CardDescription>
              The initial component code generated by v0
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="relative">
              <div className="absolute top-2 right-2 z-10">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleCopy(example.code, 'initial')}
                  className="h-8 px-2"
                >
                  {copiedStates['initial'] ? (
                    <>
                      <Check className="h-4 w-4 mr-1" />
                      Copied
                    </>
                  ) : (
                    <>
                      <Copy className="h-4 w-4 mr-1" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
              <CodeViewer 
                language="tsx"
                code={example.code}
                showLineNumbers={true}
              />
            </div>
          </CardContent>
        </Card>

        {/* Iterations */}
        {example.iterations && example.iterations.length > 0 && (
          <div className="space-y-8">
            <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
              <ArrowRight className="h-6 w-6 text-green-600" />
              Iterations
            </h2>
            
            {example.iterations.map((iteration, index) => (
              <Card key={index}>
                <CardHeader>
                  <CardTitle className="text-lg">
                    Iteration {index + 1}
                    {iteration.description && (
                      <span className="ml-2 text-sm font-normal text-gray-600">
                        - {iteration.description}
                      </span>
                    )}
                  </CardTitle>
                  <CardDescription>
                    Changes requested in this iteration
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Iteration Prompt */}
                  <div>
                    <h4 className="text-sm font-medium text-muted-foreground mb-2">
                      Prompt:
                    </h4>
                    <div className="rounded-lg bg-muted p-4">
                      <p className="text-foreground whitespace-pre-wrap">
                        {iteration.prompt}
                      </p>
                    </div>
                  </div>
                  
                  {/* Iteration Code */}
                  <div>
                    <h4 className="text-sm font-medium text-muted-foreground mb-2">
                      Updated Code:
                    </h4>
                    <div className="relative">
                      <div className="absolute top-2 right-2 z-10">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleCopy(iteration.code, `iteration-${index}`)}
                          className="h-8 px-2"
                        >
                          {copiedStates[`iteration-${index}`] ? (
                            <>
                              <Check className="h-4 w-4 mr-1" />
                              Copied
                            </>
                          ) : (
                            <>
                              <Copy className="h-4 w-4 mr-1" />
                              Copy
                            </>
                          )}
                        </Button>
                      </div>
                      <CodeViewer 
                        language="tsx"
                        code={iteration.code}
                        showLineNumbers={true}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}

        {/* Additional Info */}
        <div className="mt-8 p-6 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Try it yourself!
          </h3>
          <p className="text-gray-700 mb-4">
            You can use this example as a starting point for your own components. 
            Copy the prompt and code, then iterate on it to match your specific needs.
          </p>
          <div className="flex flex-wrap gap-3">
            <Button asChild>
              <a href="/getting-started">
                Get Started
                <ArrowRight className="ml-2 h-4 w-4" />
              </a>
            </Button>
            {example.componentPath && (
              <Button variant="outline" asChild>
                <a
                  href={`https://github.com/BenAHammond/v0-mcp-server/tree/main/${example.componentPath}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  View Source
                  <ExternalLink className="ml-2 h-4 w-4" />
                </a>
              </Button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}